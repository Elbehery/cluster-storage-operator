package manifests

import (
	"github.com/ghodss/yaml"
	"github.com/pkg/errors"

	"github.com/openshift/installer/pkg/asset"
	"github.com/openshift/installer/pkg/asset/installconfig"

	tectonicnetwork "github.com/coreos/tectonic-config/config/tectonic-network"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

const (
	defaultMTU         = "1450"
	noCfgFilename      = "network-operator-config.yml"
	noManifestFilename = "network-operator-manifests.yml"
)

// networkOperator generates the network-operator-*.yml files
type networkOperator struct {
	config   *tectonicnetwork.OperatorConfig
	FileList []*asset.File
}

var _ asset.WritableAsset = (*networkOperator)(nil)

// Name returns a human friendly name for the operator
func (no *networkOperator) Name() string {
	return "Network Operator"
}

// Dependencies returns all of the dependencies directly needed by an
// networkOperator asset.
func (no *networkOperator) Dependencies() []asset.Asset {
	return []asset.Asset{
		&installconfig.InstallConfig{},
	}
}

// Generate generates the network-operator-config.yml and network-operator-manifest.yml files
func (no *networkOperator) Generate(dependencies asset.Parents) error {
	installConfig := &installconfig.InstallConfig{}
	dependencies.Get(installConfig)

	no.config = &tectonicnetwork.OperatorConfig{
		TypeMeta: metav1.TypeMeta{
			APIVersion: tectonicnetwork.APIVersion,
			Kind:       tectonicnetwork.Kind,
		},
		PodCIDR: installConfig.Config.Networking.PodCIDR.String(),
		CalicoConfig: tectonicnetwork.CalicoConfig{
			MTU: defaultMTU,
		},
		NetworkProfile: tectonicnetwork.NetworkType(installConfig.Config.Networking.Type),
	}

	configData, err := yaml.Marshal(no.config)
	if err != nil {
		return errors.Wrapf(err, "failed to create %s manifests from InstallConfig", no.Name())
	}
	no.FileList = []*asset.File{
		{
			Filename: noCfgFilename,
			Data:     configData,
		},
		{
			Filename: noManifestFilename,
			Data:     []byte{},
		},
	}

	return nil
}

// Files returns the files generated by the asset.
func (no *networkOperator) Files() []*asset.File {
	return no.FileList
}

// Load is a no-op because network-operator manifest is not written to disk.
func (no *networkOperator) Load(asset.FileFetcher) (bool, error) {
	return false, nil
}
