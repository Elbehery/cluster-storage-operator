// Code generated by go-bindata.
// sources:
// assets/aws.yaml
// assets/openstack.yaml
// DO NOT EDIT!

package generated

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _assetsAwsYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\x8e\x31\x4b\xc7\x40\x0c\x47\xf7\xfb\x14\xe1\xbf\xb7\xa2\x93\xdc\x68\xa1\x9b\x93\xa0\x73\xea\xc5\x12\xda\x4b\x8e\x24\x57\xf1\xdb\x4b\xab\x0e\xae\xf9\xf1\x5e\x1e\x36\x7e\x25\x73\x56\xc9\xe0\xa1\x86\x2b\x8d\xdb\xa3\x8f\xac\x77\xc7\x7d\xda\x58\x4a\x86\x97\x9f\xfb\xb4\xa3\x7b\xaa\x14\x58\x30\x30\x27\x00\xc1\x4a\x19\xd6\xf6\x90\x00\x50\x44\x03\x83\x55\xfc\x9c\xe0\xcf\xf6\x7e\x52\xe3\xd6\x17\x32\xa1\xa0\xcb\xcc\x3e\x14\xfa\xc0\xbe\xc7\x70\xcd\x19\x6e\x61\x9d\x6e\xa9\x99\x1e\x7c\xc6\x90\x65\xf8\xcf\xe0\xa7\x0f\xb4\x78\x6a\x68\x58\x29\xc8\xae\x37\xf1\xd5\x7e\x0b\x0e\xdd\x7b\xa5\x27\x96\xc2\xb2\x3e\x6b\xa1\x0c\x6f\xc8\x31\xab\xcd\x6c\x1e\x93\x8a\xf7\x4a\x96\xbe\x03\x00\x00\xff\xff\xcc\xb7\x31\x45\xf1\x00\x00\x00")

func assetsAwsYamlBytes() ([]byte, error) {
	return bindataRead(
		_assetsAwsYaml,
		"assets/aws.yaml",
	)
}

func assetsAwsYaml() (*asset, error) {
	bytes, err := assetsAwsYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/aws.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsOpenstackYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\x8e\xb1\x8e\xc3\x30\x0c\x43\x77\x7f\x85\x90\x3d\x3e\xdc\x76\xf0\x7a\x9f\x50\xa0\x3b\x13\xab\x85\x90\x44\x0e\x24\x25\xdf\x5f\x38\x45\x87\xae\x24\x1f\x49\xec\x72\x67\x73\x69\x5a\xc8\xa3\x19\x9e\x9c\x97\x3f\xcf\xd2\x7e\xce\xdf\xb4\x88\xd6\x42\xb7\xb7\xfe\xbf\xc2\x3d\x6d\x1c\xa8\x08\x94\x44\xa4\xd8\xb8\x63\xd0\x0a\xab\x89\x08\xaa\x2d\x10\xd2\xd4\xbb\x4f\x9f\xca\xb9\xa3\x79\xe2\x40\x5e\x8e\x89\x4d\x39\xf8\xda\x10\x1f\x2b\x3f\x70\xac\x31\x5e\x99\x42\x43\xd8\xc1\x43\xda\xad\x9d\xd2\x6f\xb1\x15\xfa\x66\x66\xd1\xca\x96\x5e\x01\x00\x00\xff\xff\xf3\x03\x04\x7a\xba\x00\x00\x00")

func assetsOpenstackYamlBytes() ([]byte, error) {
	return bindataRead(
		_assetsOpenstackYaml,
		"assets/openstack.yaml",
	)
}

func assetsOpenstackYaml() (*asset, error) {
	bytes, err := assetsOpenstackYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/openstack.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"assets/aws.yaml": assetsAwsYaml,
	"assets/openstack.yaml": assetsOpenstackYaml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"assets": &bintree{nil, map[string]*bintree{
		"aws.yaml": &bintree{assetsAwsYaml, map[string]*bintree{}},
		"openstack.yaml": &bintree{assetsOpenstackYaml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

