// Code generated by go-bindata.
// sources:
// assets/aws.yaml
// assets/azure.yaml
// assets/gcp.yaml
// assets/openstack.yaml
// assets/vsphere.yaml
// DO NOT EDIT!

package generated

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _assetsAwsYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\x90\xb1\x4e\xc3\x40\x0c\x86\xf7\x7b\x0a\xab\x7b\x83\x60\x42\x37\x52\xd1\x8d\x09\xa9\xcc\x6e\xcf\x44\x56\x72\xf6\xc9\xf6\xa5\xf4\xed\x51\x52\x51\x89\xd5\xbf\xff\xcf\x9f\x8c\x8d\x4f\x64\xce\x2a\x19\x3c\xd4\x70\xa4\x61\x7a\xf5\x81\xf5\x69\x79\x4e\x13\x4b\xc9\xf0\x79\x9f\x1f\x66\x74\x4f\x95\x02\x0b\x06\xe6\x04\x20\x58\x29\xc3\xd8\x5e\x12\x00\x8a\x68\x60\xb0\x8a\xaf\x11\xfc\xd1\x2e\x6b\x6b\x98\xfa\x99\x4c\x28\x68\x23\xb3\xef\x0b\x7d\x63\x9f\x63\xbf\xc5\x19\x76\x61\x9d\x76\xa9\x99\x2e\xbc\xca\x90\x65\xf8\xdf\xc1\xab\xef\xe9\xec\xa9\xa1\x61\xa5\x20\xdb\xce\xc4\xad\x3d\x0c\x48\x2e\x76\x6b\x41\xe5\x81\x5b\x74\xee\x95\xde\x58\x0a\xcb\xf8\xa1\x85\x32\x7c\x21\xc7\x51\xed\xc8\xe6\x71\x50\xf1\x5e\xc9\x12\xce\xb3\x5e\x4f\xdb\xf2\xfb\x4f\x43\xb9\xbf\x63\x65\xa4\xdf\x00\x00\x00\xff\xff\xfd\xef\xba\x20\x20\x01\x00\x00")

func assetsAwsYamlBytes() ([]byte, error) {
	return bindataRead(
		_assetsAwsYaml,
		"assets/aws.yaml",
	)
}

func assetsAwsYaml() (*asset, error) {
	bytes, err := assetsAwsYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/aws.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsAzureYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\x8f\x4d\x4b\xc4\x40\x0c\x86\xef\xf3\x2b\xc2\xde\x5b\xf1\x26\x73\x74\x61\x4f\x2e\x88\x0b\x7a\x94\xd8\x89\x25\xb4\x93\x94\x24\x53\xd0\x5f\x2f\x6d\x51\xf0\x9a\x8f\xf7\x7d\x1e\x5c\xf8\x95\xcc\x59\x25\x83\x87\x1a\x8e\xd4\x4f\x0f\xde\xb3\xde\xad\xf7\x69\x62\x29\x19\x6e\xc7\xfc\x3c\xa3\x7b\xaa\x14\x58\x30\x30\x27\x00\xc1\x4a\x19\x2a\x0a\x8e\x54\xba\xc5\xa8\x72\xab\x09\x00\x45\x34\x30\x58\xc5\xb7\x33\xf8\x4d\x1e\xb6\x84\x7e\x6a\x1f\x64\x42\x41\x7b\x0b\x7b\x57\xe8\x13\xdb\x1c\xdd\xbe\xce\x70\x0a\x6b\x74\x4a\x8b\xe9\xca\x1b\x18\x59\x86\xff\x3f\xf8\xdd\x8c\xba\xc2\x3e\xa5\x55\xe7\x56\xe9\x91\xa5\xb0\x8c\x57\x2d\x94\xe1\x0d\x39\x2e\x6a\x17\x36\x8f\xb3\x8a\xb7\x4a\x96\x16\x34\xac\x14\x64\x3b\xd1\xe1\x75\x3d\xc0\xd3\x1f\x1f\x0e\x83\x36\x89\xf8\x5a\x28\xc3\xf3\xa1\xf3\xfe\xf4\x72\x4b\x3f\x01\x00\x00\xff\xff\x34\xb8\xb3\x7e\x26\x01\x00\x00")

func assetsAzureYamlBytes() ([]byte, error) {
	return bindataRead(
		_assetsAzureYaml,
		"assets/azure.yaml",
	)
}

func assetsAzureYaml() (*asset, error) {
	bytes, err := assetsAzureYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/azure.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsGcpYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\x8e\xb1\x6a\xc4\x40\x0c\x44\xfb\xfd\x0a\x71\xbd\x1d\xd2\x85\x2d\x73\x70\x5d\xaa\x40\x52\x2b\xde\x89\x11\xb6\xa5\x45\xab\x35\xe4\xef\x83\x7d\x04\x72\xad\x46\x33\xef\x71\x95\x0f\x78\x13\xd3\x4c\x2d\xcc\x79\xc6\xb8\xbc\xb4\x51\xec\x69\x7f\x4e\x8b\x68\xc9\xf4\x7e\xbf\x5f\x57\x6e\x2d\x6d\x08\x2e\x1c\x9c\x13\x91\xf2\x86\x4c\xf3\x84\xa1\x05\x6b\x61\x2f\x89\x88\x55\x2d\x38\xc4\xb4\x1d\x3f\xf4\x37\x3b\x1d\xf5\x71\xe9\x5f\x70\x45\xe0\x44\x48\x1b\x0a\xbe\xb9\xaf\x31\x9c\x71\xa6\x4b\x78\xc7\x25\x55\xb7\x5d\x0e\x2b\x78\xa6\xc7\xce\x81\xab\x25\x55\x76\xde\x10\xf0\x93\x12\x3f\x15\x99\x6a\xf9\x2f\xe2\xa8\xab\x4c\xa7\xc9\x70\xcf\xd5\x14\x69\xb7\xb5\x6f\x78\x15\x2d\xa2\xf3\x9b\x15\x64\xfa\x64\x89\x9b\xf9\x4d\xbc\xc5\xd5\xb4\xf5\x0d\xfe\x1b\x00\x00\xff\xff\x96\xbc\x37\xc6\x19\x01\x00\x00")

func assetsGcpYamlBytes() ([]byte, error) {
	return bindataRead(
		_assetsGcpYaml,
		"assets/gcp.yaml",
	)
}

func assetsGcpYaml() (*asset, error) {
	bytes, err := assetsGcpYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/gcp.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsOpenstackYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\x8e\xb1\x4e\x03\x41\x0c\x44\xfb\xfd\x0a\x2b\x7d\x16\xd1\xa1\x2d\x89\x94\x8e\x0a\x09\x6a\x27\x36\x91\x75\xb7\xf6\xc9\xf6\xde\xf7\xa3\x3d\x44\x91\x76\x66\xde\xcc\xe0\x26\x5f\xec\x21\xa6\x0d\x22\xcd\xf1\xc1\x75\x79\x8b\x2a\xf6\xb2\xbf\x96\x45\x94\x1a\x7c\xfe\xe9\x97\x15\x23\x4a\xe7\x44\xc2\xc4\x56\x00\x14\x3b\x4f\x0c\x95\xd0\xa9\x00\xa0\xaa\x25\xa6\x98\xc6\xf4\xe1\xbf\xf2\x3e\xd1\x7a\xe3\xc4\xba\x8c\x1b\xbb\x72\xf2\xb1\x21\x71\x26\xfe\xc1\xb1\xe6\xf9\xc8\x34\x38\xa5\x0f\x3e\x95\xcd\x6d\x97\x79\x8b\xbd\xc1\x33\x73\x17\x25\xf6\xb2\xdb\x3a\x3a\xbf\x8b\x92\xe8\xe3\xc3\x88\x1b\x7c\xa3\xe4\xd5\xfc\x2a\x1e\x79\x31\x8d\xd1\xd9\xcb\x6f\x00\x00\x00\xff\xff\x02\xf5\x89\xd1\xe2\x00\x00\x00")

func assetsOpenstackYamlBytes() ([]byte, error) {
	return bindataRead(
		_assetsOpenstackYaml,
		"assets/openstack.yaml",
	)
}

func assetsOpenstackYaml() (*asset, error) {
	bytes, err := assetsOpenstackYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/openstack.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsVsphereYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\x8e\x31\x4e\xc6\x30\x0c\x46\xf7\x9c\xc2\xea\xde\x22\x36\x94\x95\x23\x20\xb1\x1b\xe2\x52\x2b\x8d\x1d\xd9\x4e\xce\x8f\x5a\xf8\x87\x7f\xf5\xa7\xf7\xfc\xb0\xf3\x27\x99\xb3\x4a\x06\x0f\x35\xfc\xa1\xad\xbe\xf9\xc6\xfa\x32\x5f\x53\x65\x29\x19\x3e\xfe\xee\xef\x27\xba\xa7\x46\x81\x05\x03\x73\x02\x10\x6c\x94\x21\x0e\x96\x04\x80\x22\x1a\x18\xac\xe2\xd7\x06\x0f\xdd\xf7\x85\x6d\x75\x7c\x91\x09\x05\xdd\x6a\xf6\xb5\xd0\x8e\xe3\x8c\xf5\x9e\x33\x2c\x61\x83\x96\xd4\x4d\x27\x5f\x35\x64\x19\x9e\x99\xe9\xfd\x20\xa3\x75\xea\x39\x1a\xa5\x8e\x86\x8d\x82\xec\xfe\x56\xd8\xeb\xae\xd6\x30\xfe\x7b\x7e\x03\x00\x00\xff\xff\x22\x6d\x66\xbf\xd8\x00\x00\x00")

func assetsVsphereYamlBytes() ([]byte, error) {
	return bindataRead(
		_assetsVsphereYaml,
		"assets/vsphere.yaml",
	)
}

func assetsVsphereYaml() (*asset, error) {
	bytes, err := assetsVsphereYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/vsphere.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"assets/aws.yaml": assetsAwsYaml,
	"assets/azure.yaml": assetsAzureYaml,
	"assets/gcp.yaml": assetsGcpYaml,
	"assets/openstack.yaml": assetsOpenstackYaml,
	"assets/vsphere.yaml": assetsVsphereYaml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"assets": &bintree{nil, map[string]*bintree{
		"aws.yaml": &bintree{assetsAwsYaml, map[string]*bintree{}},
		"azure.yaml": &bintree{assetsAzureYaml, map[string]*bintree{}},
		"gcp.yaml": &bintree{assetsGcpYaml, map[string]*bintree{}},
		"openstack.yaml": &bintree{assetsOpenstackYaml, map[string]*bintree{}},
		"vsphere.yaml": &bintree{assetsVsphereYaml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

