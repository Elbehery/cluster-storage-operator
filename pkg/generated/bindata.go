// Code generated by go-bindata.
// sources:
// manifests/aws.yaml
// manifests/openstack.yaml
// DO NOT EDIT!

package generated

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _manifestsAwsYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\x8e\x31\x8e\x83\x40\x0c\x45\xfb\x39\x85\x45\x0f\xab\xdd\x6a\x35\x6d\x8e\x10\x29\xbd\x09\x3f\xc8\x02\x3c\x23\xdb\x10\xe5\xf6\x11\x24\x29\xd2\xfa\xeb\x3d\x3f\xae\x72\x81\xb9\x14\xcd\xe4\x51\x8c\x47\x74\xd3\xbf\x77\x52\x7e\xb6\xdf\x34\x89\x0e\x99\xce\xaf\xfb\x69\x66\xf7\xb4\x20\x78\xe0\xe0\x9c\x88\x94\x17\x64\x1a\xeb\x5f\x22\x62\xd5\x12\x1c\x52\xd4\xf7\x89\x3e\xb6\xeb\x4e\x75\xd3\xda\xc3\x14\x81\xc3\x2c\xde\x0e\xb8\xf1\x3a\x47\x7b\xcc\x99\x9a\xb0\x15\x4d\xaa\x56\x36\xd9\x63\x60\x99\xbe\x19\xbe\x7b\x8b\xde\x53\x65\xe3\x05\x01\x3b\xde\xc4\xa3\xbe\x0b\x9e\x01\x00\x00\xff\xff\x7e\xdd\x79\x79\xc9\x00\x00\x00")

func manifestsAwsYamlBytes() ([]byte, error) {
	return bindataRead(
		_manifestsAwsYaml,
		"manifests/aws.yaml",
	)
}

func manifestsAwsYaml() (*asset, error) {
	bytes, err := manifestsAwsYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "manifests/aws.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _manifestsOpenstackYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\x8e\xb1\x8e\xc3\x30\x0c\x43\x77\x7f\x85\x90\x3d\x3e\xdc\x76\xf0\x7a\x9f\x50\xa0\x3b\x13\xab\x85\x90\x44\x0e\x24\x25\xdf\x5f\x38\x45\x87\xae\x24\x1f\x49\xec\x72\x67\x73\x69\x5a\xc8\xa3\x19\x9e\x9c\x97\x3f\xcf\xd2\x7e\xce\xdf\xb4\x88\xd6\x42\xb7\xb7\xfe\xbf\xc2\x3d\x6d\x1c\xa8\x08\x94\x44\xa4\xd8\xb8\x63\xd0\x0a\xab\x89\x08\xaa\x2d\x10\xd2\xd4\xbb\x4f\x9f\xca\xb9\xa3\x79\xe2\x40\x5e\x8e\x89\x4d\x39\xf8\xda\x10\x1f\x2b\x3f\x70\xac\x31\x5e\x99\x42\x43\xd8\xc1\x43\xda\xad\x9d\xd2\x6f\xb1\x15\xfa\x66\x66\xd1\xca\x96\x5e\x01\x00\x00\xff\xff\xf3\x03\x04\x7a\xba\x00\x00\x00")

func manifestsOpenstackYamlBytes() ([]byte, error) {
	return bindataRead(
		_manifestsOpenstackYaml,
		"manifests/openstack.yaml",
	)
}

func manifestsOpenstackYaml() (*asset, error) {
	bytes, err := manifestsOpenstackYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "manifests/openstack.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"manifests/aws.yaml": manifestsAwsYaml,
	"manifests/openstack.yaml": manifestsOpenstackYaml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"manifests": &bintree{nil, map[string]*bintree{
		"aws.yaml": &bintree{manifestsAwsYaml, map[string]*bintree{}},
		"openstack.yaml": &bintree{manifestsOpenstackYaml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

